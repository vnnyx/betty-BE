name: Deployment

on:
  push:
    branches:
      - main
      - release

jobs:
  deployment:
    runs-on: ubuntu-latest
    environment:
      name: betty-secret
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Install git-crypt
        run: |
          sudo apt-get update -y
          sudo apt-get install -y git-crypt

      - name: Import GPG key
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | base64 -d | gpg --import

      - name: Unlock git-crypt files
        run: |
          git-crypt unlock
          git-crypt status

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.21

      - name: Set ENV variable
        run: |
          BRANCH_NAME=${GITHUB_REF##*/}
          echo "Current Branch: $BRANCH_NAME"
          if [ "$BRANCH_NAME" = "main" ]; then
            echo "ENV=production" >> $GITHUB_ENV
          elif [ "$BRANCH_NAME" = "release" ]; then
            echo "ENV=release" >> $GITHUB_ENV
          else
            echo "ENV=development" >> $GITHUB_ENV
          fi

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and Push Docker image
        run: |
          echo "The environment is ${{ env.ENV }}"
          BRANCH_NAME=${GITHUB_REF##*/}
          docker build --build-arg ENV=${{ env.ENV }} -t vnnyx/betty-api:"$BRANCH_NAME"-${{ github.run_number }}-${{ github.sha }} .
          docker push vnnyx/betty-api:"$BRANCH_NAME"-${{ github.run_number }}-${{ github.sha }}

      - name: Setup OpenVPN
        run: |
          # Commands to configure and connect to OpenVPN
          sudo apt install openvpn -y
          echo "${{ secrets.OPENVPN_CONFIG }}" > vpnconfig.ovpn
          sudo openvpn --config vpnconfig.ovpn &

      - name: Test VPN
        run: |
          # Test the VPN connection
          ifconfig

      - name: Set up Kubernetes context
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG }}" | base64 -d > $HOME/.kube/config

      - name: Test Kubernetes
        run: |
          kubectl get nodes

      - name: Update Kubernetes Deployment
        run: |
          BRANCH_NAME=${GITHUB_REF##*/}
          sed -i "s|vnnyx/betty-api:latest|vnnyx/betty-api:${BRANCH_NAME}-${{ github.run_number }}-${{ github.sha }}|" k8s/app.yaml

      - name: Deploy to Kubernetes
        run: |
          BRANCH_NAME=${GITHUB_REF##*/}
          # Commands to deploy to Kubernetes
          if [ "$BRANCH_NAME" = "main" ]; then
            kubectl apply -f k8s/app-ingress.yaml
            kubectl apply -f k8s/app.yaml
          elif [ "$BRANCH_NAME" = "release" ]; then
            kubectl apply -f k8s/app-ingress.yaml
            kubectl apply -f k8s/app-release.yaml
          else
            echo "No deployment for branch $BRANCH_NAME"
          fi

      - name: Cleanup VPN Connection
        if: always()
        run: sudo killall openvpn

      - name: Notify Slack on Success
        if: success()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_CHANNEL: "github-action-notify"
          SLACK_TITLE: "Deployment Successful :white_check_mark:"
          SLACK_MESSAGE: "Deployment of ${{ github.repository }} was successful."
          SLACK_USERNAME: "GitHub Actions"
          SLACK_ICON_EMOJI: ":rocket:"
          SLACK_COLOR: "#36a64f"

      - name: Notify Slack on Failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_CHANNEL: "github-action-notify"
          SLACK_TITLE: "Deployment Failed :x:"
          SLACK_MESSAGE: "Deployment of ${{ github.repository }} failed."
          SLACK_USERNAME: "GitHub Actions"
          SLACK_ICON_EMOJI: ":fire:"
          SLACK_COLOR: "#ff0000"
